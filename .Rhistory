library(RColorBrewer)
install.packages(RColorBrewer)
install.packages('RColorBrewer')
install.packages('pophelper')
gitHub.wd <- "/Users/clhen/Documents/HybridSimulation/"
setwd(gitHub.wd)
# Declare path variables, for demonstrating plotting functions below
# Single STRUCTURE file
testStructFile <- paste0(gitHub.wd,"Scenarios/4sp_10ms_20ns/StructOut1/parentandhybrid4Deme_1_f")
# Folder of STRUCTURE files
testStructFolder <- paste0(gitHub.wd,"Scenarios/4sp_10ms_20ns/StructOut1/")
# Colors to use for plotting (RGB components in hexadecimal)
test.colors <- c('#A8FFFD','#B862D3', '#A39D9D','#FFFF00','#69C261', '#FF59AC', '#26CDCD',  '#C1C6FF')
# Function for reading in a single STRUCTURE file, and plotting it
plotSTRUCTURE_single <- function(structFile, colors, title){
# Read in the STRUCTURE file, using the readQStructure function
Qmat <- readQStructure(files = structFile)
# Capture the name of the Q matrix, and combine it with the title argument. This will be used as the plot title
structName <- paste0(title, ": ", names(Qmat))
# Convert the list object generated by readQStructure to a data.frame, for plotting purposes
Qmat <- as.data.frame(unlist(Qmat, recursive = FALSE))
# Plotting: loop through the columns of the Q matrix (where each column is a K value), plotting column by column
for(i in 1:length(Qmat)){
if(i==1){
# Initial barplot, for first column of values
barplot(Qmat[,i], xlim=c(0,(nrow(Qmat)+20)), ylim=c(0,1.3), horiz=F, beside=F,
col=colors[i], axisnames=T, space=0.2, yaxt= "n", main=structName)
off.value <- Qmat[,i]
}else{
# Subsequent barplots, with offset (to stack columns, as necessary)
barplot(Qmat[,i], offset=off.value, add=T, beside=F, xlim=c(0,(nrow(Qmat)+20)),
horiz=F, col=colors[i], yaxt= "n")
off.value <- off.value + Qmat[,i]
}
}
# Add in a y axis, which shows genomic proportions
axis(2, at = c(0, 0.25, 0.5, 0.75, 1), labels=c("0", "0.25", "0.50", "0.75", "1.00"), cex.axis = 1, las = 2, pos = -0.2, xpd=T)
}
# Plot single file
plotSTRUCTURE_single(structFile = testStructFile, colors = test.colors, title = "4sp_10ms_20ns")
# Function for reading in each STRUCTURE file in a folder, and plotting it
plotSTRUCTURE_multiple <- function(folder, plotColors, scenarioNames){
# Capture current working directory, to return to when the function completes
original.wd <- getwd()
# Navigate to the folder containing STRUCTURE output files to be plotted
setwd(folder)
# Make a list of STRUCTURE output files within the specified folder. Currently, this will read in ALL files in the folder
structFiles <- dir()
# Set graphing parameters to allow for multiple rows (one for each STRUCTURE file)
par(mfrow = c(length(structFiles),1), mar = c(2.5,1,2,0.75) + 0.1, oma = c(1.5,0,3,0), mgp = c(2,1,0))
# Apply the plotSTRUCTURE_single function to each item within the list (using lapply)
lapply(structFiles, plotSTRUCTURE_single, colors=plotColors, title=scenarioNames)
# Return to original working directory
setwd(original.wd)
}
# Demonstration
plotSTRUCTURE_multiple(folder = testStructFolder, plotColors = test.colors, scenarioName = "4sp_10ms_20ns")
library(pophelper)
install.packages('devtools')
library("devtools")
install_github('royfrancis/pophelper')
library(pophelper)
# Declare path variables, for demonstrating plotting functions below
# Single STRUCTURE file
testStructFile <- paste0(gitHub.wd,"Scenarios/4sp_10ms_20ns/StructOut1/parentandhybrid4Deme_1_f")
# Folder of STRUCTURE files
testStructFolder <- paste0(gitHub.wd,"Scenarios/4sp_10ms_20ns/StructOut1/")
# Colors to use for plotting (RGB components in hexadecimal)
test.colors <- c('#A8FFFD','#B862D3', '#A39D9D','#FFFF00','#69C261', '#FF59AC', '#26CDCD',  '#C1C6FF')
# Function for reading in a single STRUCTURE file, and plotting it
plotSTRUCTURE_single <- function(structFile, colors, title){
# Read in the STRUCTURE file, using the readQStructure function
Qmat <- readQStructure(files = structFile)
# Capture the name of the Q matrix, and combine it with the title argument. This will be used as the plot title
structName <- paste0(title, ": ", names(Qmat))
# Convert the list object generated by readQStructure to a data.frame, for plotting purposes
Qmat <- as.data.frame(unlist(Qmat, recursive = FALSE))
# Plotting: loop through the columns of the Q matrix (where each column is a K value), plotting column by column
for(i in 1:length(Qmat)){
if(i==1){
# Initial barplot, for first column of values
barplot(Qmat[,i], xlim=c(0,(nrow(Qmat)+20)), ylim=c(0,1.3), horiz=F, beside=F,
col=colors[i], axisnames=T, space=0.2, yaxt= "n", main=structName)
off.value <- Qmat[,i]
}else{
# Subsequent barplots, with offset (to stack columns, as necessary)
barplot(Qmat[,i], offset=off.value, add=T, beside=F, xlim=c(0,(nrow(Qmat)+20)),
horiz=F, col=colors[i], yaxt= "n")
off.value <- off.value + Qmat[,i]
}
}
# Add in a y axis, which shows genomic proportions
axis(2, at = c(0, 0.25, 0.5, 0.75, 1), labels=c("0", "0.25", "0.50", "0.75", "1.00"), cex.axis = 1, las = 2, pos = -0.2, xpd=T)
}
# Plot single file
plotSTRUCTURE_single(structFile = testStructFile, colors = test.colors, title = "4sp_10ms_20ns")
# Function for reading in each STRUCTURE file in a folder, and plotting it
plotSTRUCTURE_multiple <- function(folder, plotColors, scenarioNames){
# Capture current working directory, to return to when the function completes
original.wd <- getwd()
# Navigate to the folder containing STRUCTURE output files to be plotted
setwd(folder)
# Make a list of STRUCTURE output files within the specified folder. Currently, this will read in ALL files in the folder
structFiles <- dir()
# Set graphing parameters to allow for multiple rows (one for each STRUCTURE file)
par(mfrow = c(length(structFiles),1), mar = c(2.5,1,2,0.75) + 0.1, oma = c(1.5,0,3,0), mgp = c(2,1,0))
# Apply the plotSTRUCTURE_single function to each item within the list (using lapply)
lapply(structFiles, plotSTRUCTURE_single, colors=plotColors, title=scenarioNames)
# Return to original working directory
setwd(original.wd)
}
# Demonstration
plotSTRUCTURE_multiple(folder = testStructFolder, plotColors = test.colors, scenarioName = "4sp_10ms_20ns")
# Demonstration
plotSTRUCTURE_multiple(folder = testStructFolder, plotColors = test.colors, scenarioName = "4sp_15ms_20ns")
# Demonstration
plotSTRUCTURE_multiple(folder = testStructFolder, plotColors = test.colors, scenarioName = "8sp_15ms_20ns")
# Plot single file
plotSTRUCTURE_single(structFile = testStructFile, colors = test.colors, title = "8sp_15ms_20ns")
# Demonstration
plotSTRUCTURE_multiple(folder = testStructFolder, plotColors = test.colors, scenarioName = "8sp_15ms_20ns")
# Declare path variables, for demonstrating plotting functions below
# Single STRUCTURE file
testStructFile <- paste0(gitHub.wd,"Scenarios/8sp_10ms_10ns/StructOut1")
# Declare path variables, for demonstrating plotting functions below
# Single STRUCTURE file
testStructFile <- paste0(gitHub.wd,"Scenarios/8sp_10ms_10ns/StructOut1/")
# Demonstration
plotSTRUCTURE_multiple(folder = testStructFolder, plotColors = test.colors, scenarioName = "8sp_15ms_20ns")
# Folder of STRUCTURE files
testStructFolder <- paste0(gitHub.wd,"Scenarios/8sp_10ms_20ns/StructOut1/")
# Demonstration
plotSTRUCTURE_multiple(folder = testStructFolder, plotColors = test.colors, scenarioName = "8sp_15ms_20ns")
# Declare path variables, for demonstrating plotting functions below
# Single STRUCTURE file
testStructFile <- paste0(gitHub.wd,"Scenarios/8sp_10ms_10ns/StructOut4/")
# Folder of STRUCTURE files
testStructFolder <- paste0(gitHub.wd,"Scenarios/8sp_10ms_20ns/StructOut4/")
# Declare path variables, for demonstrating plotting functions below
# Single STRUCTURE file
testStructFile <- paste0(gitHub.wd,"Scenarios/8sp_10ms_10ns/StructOut4/")
# Folder of STRUCTURE files
testStructFolder <- paste0(gitHub.wd,"Scenarios/8sp_10ms_10ns/StructOut4/")
# Demonstration
plotSTRUCTURE_multiple(folder = testStructFolder, plotColors = test.colors, scenarioName = "8sp_10ms_10ns")
# Folder of STRUCTURE files
testStructFolder <- paste0(gitHub.wd,"Scenarios/8sp_10ms_10ns/StructOut7/")
# Declare path variables, for demonstrating plotting functions below
# Single STRUCTURE file
testStructFile <- paste0(gitHub.wd,"Scenarios/8sp_10ms_10ns/StructOut7/")
# Demonstration
plotSTRUCTURE_multiple(folder = testStructFolder, plotColors = test.colors, scenarioName = "8sp_10ms_10ns")
# Declare path variables, for demonstrating plotting functions below
# Single STRUCTURE file
testStructFile <- paste0(gitHub.wd,"Scenarios/8sp_10ms_10ns/StructOut3/")
# Folder of STRUCTURE files
testStructFolder <- paste0(gitHub.wd,"Scenarios/8sp_10ms_10ns/StructOut3/")
# Demonstration
plotSTRUCTURE_multiple(folder = testStructFolder, plotColors = test.colors, scenarioName = "8sp_10ms_10ns")
library(strataG)
install.library('strataG')
install.packages('strataG')
library(strataG)
library(adegenet)
library(stringr)
library(hierfstat)
# Set working directory to the RAID1 partition on the server, to allow for enough space for simulation outputs
# This folder is linked to the home folder
# sim.wd <- "~/Documents/hendrickseHybridization/SNP_Demo/"
# sim.wd <- "/home/chendrikse/Shared/HybridSimulation/"
gitHub.wd <- "/Users/clhen/Documents/HybridSimulation/"
setwd(gitHub.wd)
# ---- FUNCTIONS ----
# Function converting Arlequin output to a single genind object (through gtypes format)
strataG_arp2gen <- function(params, repNumber){
# Extract marker type from params argument
marker <- params$settings$genetics$fsc.type
# Read in the Arlequin file, convert it to a gtype object, then to a genind object
arp <- fscReadArp(params, sim=c(1,repNumber), marker = marker)
gtype <- df2gtypes(arp, ploidy = 2)
genind <- gtypes2genind(gtype)
# In the "other" slot of the genind object, pass the name of the simulation scenario, and return
genind@other <- list(params$label)
return(genind)
}
# Function for converting all of the Arlequin files in a directory to genind, generating a list of genind objects
convertAllArp <- function(arp.path, params){
# Retrieve original working directory, to reset to after conversion
original.wd <- getwd()
# Navigate to the folder containing simulation outputs
setwd(arp.path)
# Create an empty list object to receive list of genind.
# The length of this list is the number of replicates, which is specified as a numeric vector
genind.list <- vector("list",length=length(dir()[str_detect(dir(), pattern = ".arp")]))
fscReps <- seq(1, length(genind.list))
# Move up one directory, in order for the fscReadArp command (within strataG_arp2gen) to work
setwd("..")
# Convert all Arlequin files to a list of genind objects
for(i in 1:length(genind.list)){
genind.obj <- strataG_arp2gen(params, rep=i)
genind.list[[i]] <- genind.obj
}
# Reset to original working directory, and return a list of genind objects
setwd(original.wd)
return(genind.list)
}
# ---- PARAMETER VALUES ----
# Specify number of simulation replicates
num_reps <- 5
fscVersion <- "fsc2709"
# DEMES
# Specify number of total individuals, for all simulations.
# This value is 10,000 individuals, leading to 20,000 haplotypes
nInd <- 10000
# Specify number of demes (either 4 or 8)
deme <- fscDeme(deme.size = nInd, sample.size = 10)
demes4 <- fscSettingsDemes(deme, deme, deme, deme)
demes8 <- fscSettingsDemes(deme, deme, deme, deme, deme, deme, deme, deme)
# HISTORICAL EVENTS
# Number of historical events = number of demes - 1 (all other demes merging into origin deme)
hist.event1 <- fscEvent(event.time = 100000, source = 1, sink = 0, prop.migrants = 1, migr.mat = 0)
hist.event2 <- fscEvent(event.time = 100000, source = 2, sink = 0, prop.migrants = 1, migr.mat = 0)
hist.event3 <- fscEvent(event.time = 100000, source = 3, sink = 0, prop.migrants = 1, migr.mat = 0)
histEvent_4sp <- fscSettingsEvents(hist.event1,hist.event2,hist.event3)
hist.event4 <- fscEvent(event.time = 100000, source = 4, sink = 0, prop.migrants = 1, migr.mat = 0)
hist.event5 <- fscEvent(event.time = 100000, source = 5, sink = 0, prop.migrants = 1, migr.mat = 0)
hist.event6 <- fscEvent(event.time = 100000, source = 6, sink = 0, prop.migrants = 1, migr.mat = 0)
hist.event7 <- fscEvent(event.time = 100000, source = 7, sink = 0, prop.migrants = 1, migr.mat = 0)
histEvent_8sp <- fscSettingsEvents(hist.event1,hist.event2,hist.event3,
hist.event4,hist.event5,hist.event6,hist.event7)
# GENETIC PARAMETERS
# Medium low mutation rate, increased sequence length/blocks/chromosomes
dna_mutRate <- 1e-7
dna <- fscBlock_dna(sequence.length = 500, mut.rate = dna_mutRate)
DNAgenetics <- fscSettingsGenetics(dna, dna, dna, dna, dna, dna, dna, dna, dna, dna,
num.chrom = 100)
# ---- WRITE PARAMETER FILES AND RUN SIMULATIONS ----
# Navigate to the folder containing simulation outputs
sim.wd <- paste0(gitHub.wd,"Scenarios/")
setwd(sim.wd)
# Declare scenario name variables, which will be used for downstream file processing
scenario_DNA_4Deme <- "DNA_4sp_10ns"
scenario_DNA_8Deme <- "DNA_8sp_10ns"
# Write parameter files
# 4 Demes
DNA_4sp_10ns.params <- fscWrite(demes = demes4,
events = histEvent_4sp, genetics = DNAgenetics,
label = scenario_DNA_4Deme, use.wd=TRUE)
# 8 Demes
DNA_8sp_10ns.params <- fscWrite(demes = demes8,
events = histEvent_8sp, genetics = DNAgenetics,
label = scenario_DNA_8Deme, use.wd=TRUE)
# Run simulations
# 4 Demes
DNA_4sp_10ns.params <- fscRun(DNA_4sp_10ns.params, num.sims = num_reps, all.sites = TRUE, exec = fscVersion)
# 8 Demes
DNA_8sp_10ns.params <- fscRun(DNA_8sp_10ns.params, num.sims = num_reps, all.sites = TRUE, exec = fscVersion)
# ---- CONVERT ARLEQUIN OUTPUTS TO STRATAG ----
# 4 Demes
# Make a list of genind objects
setwd(paste0(sim.wd, scenario_DNA_4Deme))
DNA_4sp_10ns.genList <- convertAllArp(arp.path = paste0(sim.wd, scenario_DNA_4Deme),
params = DNA_4sp_10ns.params)
# Save genind objects to .Rdata objects, to be read in later
for(i in 1:length(DNA_4sp_10ns.genList)){
saveRDS(object = DNA_4sp_10ns.genList[i], file = paste0(scenario_DNA_4Deme,"_1_",i,"_genind.Rdata"))
}
# 8 Demes
# Make a list of genind objects
setwd(paste0(sim.wd, scenario_DNA_8Deme))
DNA_8sp_10ns.genList <- convertAllArp(arp.path = paste0(sim.wd, scenario_DNA_8Deme),
params = DNA_8sp_10ns.params)
# ---- FUNCTIONS ----
# Function converting Arlequin output to a single genind object (through gtypes format)
strataG_arp2gen <- function(params, repNumber){
# Extract marker type from params argument
marker <- params$settings$genetics$fsc.type
# Read in the Arlequin file, convert it to a gtype object, then to a genind object
arp <- fscReadArp(params, sim=c(1,repNumber), marker = marker)
gtype <- df2gtypes(arp, ploidy = 2)
genind <- gtypes2genind(gtype)
# In the "other" slot of the genind object, pass the name of the simulation scenario, and return
genind@other <- list(params$label)
return(genind)
}
# Function for converting all of the Arlequin files in a directory to genind, generating a list of genind objects
convertAllArp <- function(arp.path, params){
# Retrieve original working directory, to reset to after conversion
original.wd <- getwd()
# Navigate to the folder containing simulation outputs
setwd(arp.path)
# Create an empty list object to receive list of genind.
# The length of this list is the number of replicates, which is specified as a numeric vector
genind.list <- vector("list",length=length(dir()[str_detect(dir(), pattern = ".arp")]))
fscReps <- seq(1, length(genind.list))
# Move up one directory, in order for the fscReadArp command (within strataG_arp2gen) to work
setwd("..")
# Convert all Arlequin files to a list of genind objects
for(i in 1:length(genind.list)){
genind.obj <- strataG_arp2gen(params, rep=i)
genind.list[[i]] <- genind.obj
}
# Reset to original working directory, and return a list of genind objects
setwd(original.wd)
return(genind.list)
}
# Set working directory to the RAID1 partition on the server, to allow for enough space for simulation outputs
# This folder is linked to the home folder
# sim.wd <- "~/Documents/hendrickseHybridization/SNP_Demo/"
# sim.wd <- "/home/chendrikse/Shared/HybridSimulation/"
gitHub.wd <- "/Users/clhen/Documents/HybridSimulation/"
setwd(gitHub.wd)
# ---- PARAMETER VALUES ----
# Specify number of simulation replicates
num_reps <- 5
fscVersion <- "fsc2709"
# DEMES
# Specify number of total individuals, for all simulations.
# This value is 10,000 individuals, leading to 20,000 haplotypes
nInd <- 10000
# Specify number of demes (either 4 or 8)
deme <- fscDeme(deme.size = nInd, sample.size = 10)
library(stringr)
library(hierfstat)
library(strataG)
library(adegenet)
library(strataG)
install.packages('strataG')
devtools::install_github('ericarcher/strataG', build_vignettes = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
devtools::install_github('ericarcher/strataG', build_vignettes = TRUE)
# make sure you have Rtools installed
if (!require('devtools')) install.packages('devtools')
# install from GitHub
devtools::install_github('ericarcher/strataG', build_vignettes = TRUE)
install.packages('rmetasim')
